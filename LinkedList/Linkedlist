from node import Node
import tkinter
from tkinter import messagebox
root=tkinter.Tk()       #Esconder a tela do tkinter
root.withdraw()

class LinkedList:

    def __init__(self):
        self.head = None
        self._size = 0

    def append(self, elem):
        if self.head:
            # inserção quando a lista já possui elementos
            pointer = self.head
            while(pointer.next):
                pointer = pointer.next
            pointer.next = Node(elem)
        else:
            # primeira inserção
            self.head = Node(elem)
        self._size = self._size + 1

    #def __len__(self):
        #"""Retorna o tamanho da lista"""
        #return self._size

    def getnode(self, index):
        pointer = self.head
        for i in range(index):
            if pointer:
                pointer = pointer.next
            else:
                raise IndexError("indice da lista fora de range") #return None
        return pointer

    def __getitem__(self, index):                #Ver qual dado de determinado indice
        pointer = self._getnode(index)
        if pointer:
            return pointer.data
        else:
            raise IndexError("indice da lista fora de range")

    def __setitem__(self, index, elem):          #Definir um dado de determinado indice
        pointer = self._getnode(index)
        if pointer:
            pointer.data = elem
        else:
            raise IndexError("indice da lista fora de range")

    def index(self, elem):
        try:                      #Retorna o indice de determinado elemento da lista
            pointer = self.head
            i = 0
            while(pointer):
                if pointer.data == elem:
                    return i
                pointer = pointer.next
                i = i+1
        except ValueError:
            print("{} não está na lista".format(elem))

    def insert(self, index, elem):
        node = Node(elem)
        if index == 0:
            node.next = self.head
            self.head = node
        else:
            pointer = self._getnode(index-1)
            node.next = pointer.next
            pointer.next = node
        self._size = self._size + 1

    def remove(self, elem):
        try:
            if self.head == None:
                messagebox.showerror("ERRO","Lista não tem nenhum valor")
            elif self.head.data == elem:
                self.head = self.head.next 
                self._size = self._size - 1
                return True
            else:
                ancestor = self.head
                pointer = self.head.next
                while(pointer):
                    if pointer.data == elem:
                        ancestor.next = pointer.next
                        pointer.next = None
                        self._size = self._size - 1
                        return True
                    ancestor = pointer
                    pointer = pointer.next
        except ValueError:
            messagebox.showerror("ERRO","Valor não está na lista!!")

    def __repr__(self):
        r = ""
        pointer = self.head
        while(pointer):
            r = r + str(pointer.data) + "->"
            pointer = pointer.next
        return r

    def __str__(self):
        return self.__repr__()

